{"version":3,"sources":["oscillator.tsx","picker.tsx","serviceWorker.ts","index.tsx"],"names":["frequency","updateFrequency","useOscillator","start","stop","onClick","value","onChange","e","Number","target","console","log","zoomCanvasRef","React","useRef","useState","None","url","setUrl","colour","setColour","setFrquency","useEffect","Option","all","current","fold","error","zoomCanvas","getContext","zoomCanvasContext","imageSmoothingEnabled","imageData","createImageData","pixels","data","set","map","max","Math","floor","random","putImageData","Some","toDataURL","addEventListener","clientX","clientY","x","y","getImageData","r","g","b","a","rgba","handleUpdateColours","style","backgroundColor","ref","className","width","height","_","key","href","download","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2NAOe,cAA4C,IAAzCA,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,gBAA6B,EAChCC,IAAcF,GAA9BG,EADgD,EAChDA,MAAOC,EADyC,EACzCA,KACf,OACE,4BACE,4BACE,4BAAQC,QAASD,GAAjB,SAEF,4BACE,4BAAQC,QAASF,GAAjB,UAEF,4BACE,2BACEG,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAgBQ,OAAOD,EAAEE,OAAOJ,cCb5C,aACbK,QAAQC,IAAI,YACZ,IAAMC,EAAgBC,IAAMC,OAA0B,MAFnC,EAGGD,IAAME,SAAyBC,KAHlC,mBAGZC,EAHY,KAGPC,EAHO,OAISL,IAAME,SAAiB,SAJhC,mBAIZI,EAJY,KAIJC,EAJI,OAKcP,IAAME,SAAiB,KALrC,mBAKZhB,EALY,KAKDsB,EALC,KA6CnB,OAtCAR,IAAMS,WAAU,WACdC,IAAOC,IAAI,CAACZ,EAAca,UAAUC,MAClC,kBAAMhB,QAAQiB,MAAM,iBACpB,YAAmB,IAAjBC,EAAgB,oBAChBL,IAAOC,IAAI,CAACI,EAAWC,WAAW,QAAQH,MACxC,kBAAMhB,QAAQiB,MAAM,2BACpB,YAA0B,IAAxBG,EAAuB,oBACvBA,EAAkBC,uBAAwB,EAC1C,IAAMC,EAAYF,EAAkBG,gBAAgB,IAAK,KACnDC,EAASF,EAAUG,KACzBH,EAAUG,KAAKC,IAAIF,EAAOG,KAAI,kBApBpBC,EAoBuC,IAnB3DC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IADnB,IAACA,MAqBVR,EAAkBY,aAAaV,EAAW,EAAG,GAC7Cd,EAAOyB,YAAKf,EAAWgB,cAmBvBhB,EAAWiB,iBAAiB,aAjBJ,SAACtC,GAAmB,IAAD,EAC1B,CAACA,EAAEuC,QAASvC,EAAEwC,SAAtBC,EADkC,KAC/BC,EAD+B,OAEnBnB,EAAkBoB,aAAaF,EAAGC,EAAG,EAAG,GAC3Dd,KAHsC,mBAElCgB,EAFkC,KAE/BC,EAF+B,KAE5BC,EAF4B,KAEzBC,EAFyB,MAKb,WAC1B,IAAMC,EAAI,eAAWJ,EAAX,aAAiBC,EAAjB,aAAuBC,EAAvB,aAA6BC,EAA7B,KACVlC,EAAUmC,GAOZC,GAHEnC,EAAY8B,EAAIE,EAAID,EAAIE,cAWnC,IAGD,oCACE,yBAAKG,MAAO,CAAEC,gBAAiBvC,IAC7B,4BACEwC,IAAK/C,EACLgD,UAAU,cACVC,MAAO,IACPC,OAAQ,MAEV,kBAAC,EAAD,CAAY/D,UAAWA,EAAWC,gBAAiBqB,IAClDJ,EAAIoB,KAAI,SAAC0B,GAAD,OACP,uBAAGC,IAAI,IAAIC,KAAMF,EAAGG,SAAS,aAA7B,kBCnDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLjB,QAAQiB,MAAMA,EAAMyD,a","file":"static/js/main.93058694.chunk.js","sourcesContent":["import React from \"react\"\nimport useOscillator from \"use-oscillator\"\n\ninterface Props {\n  frequency: number\n  updateFrequency: (f: number) => void\n}\nexport default ({ frequency, updateFrequency }: Props) => {\n  const { start, stop } = useOscillator(frequency)\n  return (\n    <ul>\n      <li>\n        <button onClick={stop}>stop</button>\n      </li>\n      <li>\n        <button onClick={start}>start</button>\n      </li>\n      <li>\n        <input\n          value={frequency}\n          onChange={(e) => updateFrequency(Number(e.target.value))}\n        ></input>\n      </li>\n    </ul>\n  )\n}\n","import React from \"react\"\nimport { None, Option, Some } from \"space-lift\"\nimport Oscillator from \"./oscillator\"\n\nconst getRandomInt = (max: number): number =>\n  Math.floor(Math.random() * Math.floor(max))\n\nexport default () => {\n  console.log(\"rendered\")\n  const zoomCanvasRef = React.useRef<HTMLCanvasElement>(null)\n  const [url, setUrl] = React.useState<Option<string>>(None)\n  const [colour, setColour] = React.useState<string>(\"white\")\n  const [frequency, setFrquency] = React.useState<number>(450)\n\n  React.useEffect(() => {\n    Option.all([zoomCanvasRef.current]).fold(\n      () => console.error(\"empty refs\"),\n      ([zoomCanvas]) => {\n        Option.all([zoomCanvas.getContext(\"2d\")]).fold(\n          () => console.error(\"get 2d context fails\"),\n          ([zoomCanvasContext]) => {\n            zoomCanvasContext.imageSmoothingEnabled = false\n            const imageData = zoomCanvasContext.createImageData(400, 400)\n            const pixels = imageData.data\n            imageData.data.set(pixels.map(() => getRandomInt(255)))\n            zoomCanvasContext.putImageData(imageData, 0, 0)\n            setUrl(Some(zoomCanvas.toDataURL()))\n\n            const handleMouseMove = (e: MouseEvent) => {\n              const [x, y] = [e.clientX, e.clientY]\n              const [r, g, b, a] = (zoomCanvasContext.getImageData(x, y, 1, 1)\n                .data as unknown) as Array<number>\n\n              const handleUpdateColours = () => {\n                const rgba = `rgba(${r}, ${g}, ${b}, ${a})`\n                setColour(rgba)\n              }\n\n              const handleUpdateFrequency = () => {\n                setFrquency(r + b + g + a)\n              }\n\n              handleUpdateColours()\n              handleUpdateFrequency()\n            }\n            zoomCanvas.addEventListener(\"mousemove\", handleMouseMove)\n          }\n        )\n      }\n    )\n  }, [])\n\n  return (\n    <>\n      <div style={{ backgroundColor: colour }}>\n        <canvas\n          ref={zoomCanvasRef}\n          className=\"zoom-canvas\"\n          width={400}\n          height={400}\n        ></canvas>\n        <Oscillator frequency={frequency} updateFrequency={setFrquency}/>\n        {url.map((_) => (\n          <a key=\"1\" href={_} download=\"image.png\">\n            download\n          </a>\n        ))}\n      </div>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Picker from './picker';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Picker />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}